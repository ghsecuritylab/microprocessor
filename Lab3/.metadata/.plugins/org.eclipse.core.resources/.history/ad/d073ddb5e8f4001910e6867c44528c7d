	.syntax unified
	.cpu cortex-m4
	.thumb
.data
	leds: .byte 0
.text
	.global main
	.equ RCC_AHB2ENR, 0x4002104C
	.equ GPIOA_MODER, 0x48000000
	.equ GPIOA_PUPDR, 0x4800000C
	.equ GPIOA_IDR, 0x48000010
	.equ GPIOB_MODER, 0x48000400
	.equ GPIOB_OTYPER, 0x48000404
	.equ GPIOB_OSPEEDR, 0x48000408
	.equ GPIOB_PUPDR, 0x4800040C
	.equ GPIOB_ODR, 0x48000414
	.equ GPIOC_MODER, 0x48000800
	.equ GPIOC_IDR, 0x48000810
	.equ time, 4000000
main:
	bl GPIO_init
	bl Delay
	// set the current leds condition
	movs r1, 0b00001100
	ldr r0, =leds
	str r1, [r0]
	// r8 for direction, to left is 1, to right is 0
	movs r8, 1
	// r7 for block or not, block is 1, so default is 0
	movs r7, 0
	B Loop
GPIO_init:
	//TODO: Initial LED GPIO pins as output
	// Enable AHB2 clock to control GPIOB(2)
	movs r0, 0b111
	ldr r1, =RCC_AHB2ENR
	str r0, [r1]
	// set PB3, PB4, PB5, PB6 to output mode(1)
	movs r0, 0b01010101000000
	ldr r1, =GPIOB_MODER
	str r0, [r1]
	// set PB3, PB4, PB5, PB6 to high speed mode
	movs r0, 0b10101010000000
	ldr r1, =GPIOB_OSPEEDR
	str r0, [r1]
	// set the initial light right bulb
	ldr r0, =GPIOB_ODR
	movs r1, 0b11110111
	str r1, [r0]

	// set PC13 to input mode(0)
	ldr r0, =#0xF3FFFFFF
	ldr r1, =GPIOC_MODER
	str r0, [r1]
	// set PC13 1
	movs r0, 0b10000000000000
	ldr r1, =GPIOC_IDR
	ldr r1, =GPIOC_IDR
	ldr r1, =GPIOC_IDR
	str r0, [r1]

	// set PC1~PC4 to input mode(00)
	ldr r0, =#0xF3FFFFF00
	ldr r1, =GPIOC_MODER
	str r0, [r1]
	// set PC1~PC4 to Pull-up(01)
	ldr r0, =#0xFFFFFF55
	ldr r1, =GPIOC_PUPDR
	str r0, [r1]

	bx lr
Loop:
	//TODO: Write the display pattern into leds variable
	bl DisplayLED
	bl Delay
	b Loop
DisplayLED:
	//TODO: Display LED by leds
	// use direc to determine left or right
	ldr r0, =leds
	ldr r2, [r0]
	ldr r1, =GPIOB_ODR

Delay:
	//TODO: Write a delay 1 sec function
	// set the initial value of the counter of the loop
	ldr r0, =#time
	// r2 for counting how many pressing button signal
	movs r1, 0
	// r3 for whether pressing continuely
	movs r3, 0
	Delay_loop:
		// check if press button
		// 2 + 2 + 1 + 1 + 1 + 2 + 2 + 1 + 1 = 13  default : branch not taken
		ldr r2, =GPIOC_IDR
		ldr r2, [r2]
		cmp r2, 0b10000000000000
		bne Pressed
		movs r1, 0
		movs r3, 0
		b Check
		Pressed:
			adds r1, r1, 1
			ldr r4, =#10000
			// prevent switch bounce. only if 1000 PC13 = 1 in raw will be seen as dectecting the pressed
			cmp r1, r4
			ble Check
			// had been changed and over 1000 times
			cmp r3, 1
			beq Check
			eor r7, 1
			movs r1, 0
			movs r3, 1
		// see whether block, if r7 = 1, then block
		Check:
			cmp r7, 1
			beq Delay_loop
		// 13 + 5 = 18
		// 1 + 1 + 3 = 5
		subs r0, r0, 18
		cmp r0, 0
		bge Delay_loop
	bx lr
